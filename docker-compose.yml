version: '2.3'

x-defaults: &defaults
  image: raidennetwork/raiden-services:stable
  env_file: .env
  volumes:
    - ${DATA_DIR:-./data}/state:/state
    - ${DATA_DIR:-./data}/keystore:/keystore

services:
# raiden-services containers
  pfs:
    << : *defaults
    command: ["python3", "-m", "pathfinding_service.cli"]
    restart: always
    ports:
      - 6001:6000
    environment:
      - PFS_STATE_DB=/state/pfs-state.db
      - PFS_HOST=0.0.0.0
      - SERVER_NAME
      - PFS_LOG_LEVEL=${LOG_LEVEL}
      - PFS_KEYSTORE_FILE=/keystore/${KEYSTORE_FILE}
      - PFS_PASSWORD=${PASSWORD}
      - PFS_ETH_RPC=${ETH_RPC}
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.rule=Host:pfs.${SERVER_NAME}"
      - "traefik.default.backend.healthcheck.path=/api/v1/info"
    healthcheck:
      disable: true

  ms:
    << : *defaults
    command: ["python3", "-m", "monitoring_service.cli"]
    restart: always
    ports:
      - 6002:6000
    environment:
      - MS_STATE_DB=/state/ms-state.db
      - MS_LOG_LEVEL=${LOG_LEVEL}
      - MS_KEYSTORE_FILE=/keystore/${KEYSTORE_FILE}
      - MS_PASSWORD=${PASSWORD}
      - MS_ETH_RPC=${ETH_RPC}
    healthcheck:
      test: 'python3 -c "import sqlite3, sys; from time import sleep; conn=sqlite3.connect(\"/state/ms-state.db\"); r = lambda: conn.execute(\"select latest_commited_block from blockchain ORDER BY latest_commited_block DESC LIMIT 1;\").fetchone()[0]; one = r(); sleep(25); two = r(); print(two); sys.exit(0 if two > one else 1)"'

  msrc:
    << : *defaults
    command: ["python3", "-m", "request_collector.cli"]
    restart: always
    ports:
      - 6003:6000
    environment:
      - MSRC_STATE_DB=/state/ms-state.db
      - MSRC_LOG_LEVEL=${LOG_LEVEL}
      - MSRC_KEYSTORE_FILE=/keystore/${KEYSTORE_FILE}
      - MSRC_PASSWORD=${PASSWORD}
      - MSRC_CHAIN_ID=${CHAIN_ID}
    depends_on:
      ms:
        condition: service_healthy
    healthcheck:
      disable: true
  # This registers the service and stops afterwards
  registration:
    <<: *defaults
    command: ["python3", "-m", "raiden_libs.register_service"]
    environment:
      - RDN_REGISTRY_LOG_LEVEL=${LOG_LEVEL}
      - RDN_REGISTRY_KEYSTORE_FILE=/keystore/${KEYSTORE_FILE}
      - RDN_REGISTRY_PASSWORD=${PASSWORD}
      - RDN_REGISTRY_SERVICE_URL=${SERVER_NAME}
      - RDN_REGISTRY_ETH_RPC=${ETH_RPC}

# raiden-transport containers
  synapse:
    image: raidennetwork/raiden-services-bundle:nightly-synapse
    restart: always
    volumes:
      - ./config/synapse:/config
      - ${DATA_DIR:-./data}/well-known:/data_well_known
      - ${DATA_DIR:-./data}/synapse:/data
    environment:
      - SERVER_NAME
      - URL_KNOWN_FEDERATION_SERVERS
    depends_on:
      db:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.default.port=8008"
      - "traefik.default.frontend.rule=Host:${SERVER_NAME}"
      - "traefik.default.backend.healthcheck.path=/_matrix/client/versions"
      - "traefik.metrics.port=9101"
      - "traefik.metrics.frontend.rule=Host:metrics.${SERVER_NAME}"
      - "traefik.metrics.frontend.whiteList.sourceRange=${CIDR_ALLOW_METRICS}"
      - "traefik.metrics.frontend.whiteList.useXForwardedFor=false"
      - "purge_restart_container=true"

  synchrotron:
    image: raidennetwork/raiden-services-bundle:nightly-synapse
    restart: always
    volumes:
      - ./config/synapse:/config
      - ${DATA_DIR:-./data}/synapse:/data
    environment:
      - SERVER_NAME
    depends_on:
      synapse:
        condition: service_healthy
    entrypoint: ["/synapse-venv/bin/python", "-m", "synapse.app.synchrotron", "--config-path", "/config/synapse.yaml", "--config-path", "/config/workers/synchrotron.yaml"]
    healthcheck:
      disable: true
    scale: ${WORKER_COUNT:-4}
    labels:
      - "traefik.enable=true"
      - "traefik.port=8008"
      - "traefik.frontend.rule=Host:${SERVER_NAME}; PathPrefix: /_matrix/client/{version:(v2_alpha|r0)}/sync, /_matrix/client/{version:(api/v1|v2_alpha|r0)}/events, /_matrix/client/{version:(api/v1|r0)}/initialSync, /_matrix/client/{version:(api/v1|r0)}/rooms/{room:[^/]+}/initialSync"
      - "traefik.backend.loadbalancer.stickiness=true"

#  federation_reader:
#    image: raidennetwork/raiden-services-bundle:nightly-synapse
#    restart: always
#    volumes:
#      - ./config/synapse:/config
#      - ${DATA_DIR:-./data}/synapse:/data
#    environment:
#      - SERVER_NAME
#      - synapse:
#          condition: service_healthy
#    depends_on:
#      synapse:
#        condition: service_healthy
#    entrypoint: ["/synapse-venv/bin/python", "-m", "synapse.app.federation_reader", "--config-path", "/config/synapse.yaml", "--config-path", "/config/workers/federation_reader.yaml"]
#    healthcheck:
#      disable: true
#    labels:
#      - "traefik.enable=true"
#      - "traefik.port=8008"
#      - "traefik.frontend.rule=Host:${SERVER_NAME}; PathPrefix: /_matrix/federation/v1/{type:(event|state|state_ids|backfill|get_missing_events|publicRooms)}"
#
#  federation_sender:
#    image: raidennetwork/raiden-services-bundle:nightly-synapse
#    restart: always
#    volumes:
#      - ./config/synapse:/config
#      - ${DATA_DIR:-./data}/synapse:/data
#    environment:
#      - SERVER_NAME
#    depends_on:
#      synapse:
#        condition: service_healthy
#    entrypoint: ["/synapse-venv/bin/python", "-m", "synapse.app.federation_sender", "--config-path", "/config/synapse.yaml", "--config-path", "/config/workers/federation_sender.yaml"]
#    healthcheck:
#      disable: true
#
  client_reader:
    image: raidennetwork/raiden-services-bundle:nightly-synapse
    restart: always
    volumes:
      - ./config/synapse:/config
      - ${DATA_DIR:-./data}/synapse:/data
    environment:
      - SERVER_NAME
    depends_on:
      synapse:
        condition: service_healthy
    entrypoint: ["/synapse-venv/bin/python", "-m", "synapse.app.client_reader", "--config-path", "/config/synapse.yaml", "--config-path", "/config/workers/client_reader.yaml"]
    healthcheck:
      disable: true
    labels:
      - "traefik.enable=true"
      - "traefik.port=8008"
      - "traefik.frontend.rule=Host:${SERVER_NAME}; PathPrefix: /_matrix/client/versions, /_matrix/client/{version:(api/v1|r0|unstable)}/publicRooms, /_matrix/client/{version:(api/v1|r0|unstable)}/rooms/{room:.*}/joined_members, /_matrix/client/{version:(api/v1|r0|unstable)}/rooms/{room:.*}/context/{context:.*}, /_matrix/client/{version:(api/v1|r0|unstable)}/rooms/{room:.*}/members, /_matrix/client/{version:(api/v1|r0|unstable)}/rooms/{room:.*}/state, /_matrix/client/{version:(api/v1|r0|unstable)}/account/3pid, /_matrix/client/{version:(api/v1|r0|unstable)}/keys/query, /_matrix/client/{version:(api/v1|r0|unstable)}/keys/changes, /_matrix/client/{version:(api/v1|r0|unstable)}/voip/turnServer"
      - "traefik.backend.loadbalancer.stickiness=true"

  user_dir:
    image: raidennetwork/raiden-services-bundle:nightly-synapse
    restart: always
    volumes:
      - ./config/synapse:/config
      - ${DATA_DIR:-./data}/synapse:/data
    environment:
      - SERVER_NAME
    depends_on:
      synapse:
        condition: service_healthy
    entrypoint: ["/synapse-venv/bin/python", "-m", "synapse.app.user_dir", "--config-path", "/config/synapse.yaml", "--config-path", "/config/workers/user_dir.yaml"]
    healthcheck:
      disable: true
    scale: 4
    labels:
      - "traefik.enable=true"
      - "traefik.port=8008"
      - "traefik.frontend.rule=Host:${SERVER_NAME}; PathPrefix: /_matrix/client/{version:(api/v1|r0|unstable)}/user_directory/search"
      - "traefik.backend.loadbalancer.stickiness=true"

  event_creator:
    image: raidennetwork/raiden-services-bundle:nightly-synapse
    restart: always
    volumes:
      - ./config/synapse:/config
      - ${DATA_DIR:-./data}/synapse:/data
    environment:
      - SERVER_NAME
    depends_on:
      synapse:
        condition: service_healthy
    entrypoint: ["/synapse-venv/bin/python", "-m", "synapse.app.event_creator", "--config-path", "/config/synapse.yaml", "--config-path", "/config/workers/event_creator.yaml"]
    healthcheck:
      disable: true
    scale: ${WORKER_COUNT:-4}
    labels:
      - "traefik.enable=true"
      - "traefik.port=8008"
      - "traefik.frontend.rule=Host:${SERVER_NAME}; PathPrefix: /_matrix/client/{version:(api/v1|r0|unstable)}/rooms/{room:.*}/send, /_matrix/client/{version:(api/v1|r0|unstable)}/rooms/{room:.*}/{action:(join|invite|leave|ban|unban|kick)}, /_matrix/client/{version:(api/v1|r0|unstable)}/join/, /_matrix/client/{version:(api/v1|r0|unstable)}/profile/"
      - "traefik.backend.loadbalancer.stickiness=true"
  db:
    image: raidennetwork/raiden-services-bundle:nightly-db
    restart: always
    volumes:
      - ${DATA_DIR:-./data}/db:/var/lib/postgresql/data
    healthcheck:
      test: echo 'select 1' | psql -U postgres > /dev/null || exit 1

  # Serves the .well-known/matrix/server file
  well_known_server:
    image: raidennetwork/raiden-services-bundle:nightly-well_known_server
    restart: always
    volumes:
      - ${DATA_DIR:-./data}/well-known:/data
    depends_on:
      synapse:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.rule=Host:${SERVER_NAME}; PathPrefix: /.well-known/matrix"
  purger:
    image: python:3
    restart: always
    volumes:
      - ./purge:/app
      - /var/run/docker.sock:/var/run/docker.sock
    working_dir: /app
    depends_on:
      synapse:
        condition: service_healthy
      db:
        condition: service_healthy
    environment:
      - PURGE_SLEEP_UNTIL=05:00:00
      - MATRIX_DOCKER_RESTART_LABEL=purge_restart_container
      - MATRIX_DB_URI=postgres://postgres@db:5432/synapse
      - MATRIX_SERVER=http://synapse:8008
      - SERVER_NAME
      - MATRIX_ADMIN_PRIVATE_KEY_PASSWORD=
      - MATRIX_ADMIN_PRIVATE_KEY_GENERATE=1
      - MATRIX_KEEP_NEWER=15
      - MATRIX_KEEP_MIN_MSGS=3000
    command: bash purge.sh
# common traefik
  traefik:
    image: traefik:1.7
    restart: always
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./config/traefik:/etc/traefik
      - ${DATA_DIR:-./data}/traefik:/data
      - /var/run/docker.sock:/var/run/docker.sock
    command: --acme.email=${LETSENCRYPT_EMAIL}
    depends_on:
      synapse:
        condition: service_healthy
      well_known_server:
        condition: service_healthy
      synchrotron:
        condition: service_started
      client_reader:
        condition: service_started
      user_dir:
        condition: service_started
      event_creator:
        condition: service_started
      pfs:
        condition: service_started
      ms:
        condition: service_healthy
      msrc:
        condition: service_started
    healthcheck:
      disable: true
    labels:
      - "traefik.enable=true"
      - "traefik.port=8080"
      - "traefik.frontend.rule=Host:proxy.${SERVER_NAME}"
      - "traefik.frontend.whiteList.sourceRange=${CIDR_ALLOW_PROXY}"
